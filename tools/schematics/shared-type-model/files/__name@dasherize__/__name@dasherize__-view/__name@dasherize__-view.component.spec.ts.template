import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { <%= classify(name)%>ViewComponent } from './<%= dasherize(name)%>-view.component';
import { <%= classify(name)%> } from '../<%= dasherize(name)%>';
import { DebugElement } from '@angular/core';
import { By } from '@angular/platform-browser';

class <%= classify(name)%>ViewComponentPageObject {
  selector = '.<%= dasherize(name)%>-view'
  selectors = {
    // TODO: Add css selector for your HTML elements for testing
  };

  getSelector(name?: string): string {
    if (name && name in this.selectors) {
      return `${this.selector} ${this.selectors[name]}`;
    } else {
      return `${this.selector}`;
    }
  }
}

describe('<%= classify(name)%>ViewComponent', () => {
  let component: <%= classify(name)%>ViewComponent;
  let fixture: ComponentFixture<<%= classify(name)%>ViewComponent>;
  let debugElement: DebugElement;
  const pageObject = new <%= classify(name)%>ViewComponentPageObject();

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ <%= classify(name)%>ViewComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(<%= classify(name)%>ViewComponent);
    component = fixture.componentInstance;
    debugElement = fixture.debugElement;
    fixture.detectChanges();
  });

  it('should show correct data', async done => {
    // TODO: Implement testing for individual property of your model
    component.<%= camelize(name)%> = <%= classify(name)%>.forge();
    await fixture.whenStable();
    fixture.detectChanges();
    const <%= camelize(name)%>Element: HTMLElement = debugElement.query(By.css(pageObject.getSelector())).nativeElement;
    expect(<%= camelize(name)%>Element.innerHTML).toContain(JSON.stringify(component.<%= camelize(name)%>.toJSON()));
    done();
  });
});
